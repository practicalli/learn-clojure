{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Learning Clojure","text":"<p>Clojure is an elegant programming language for a more civilized development experience.</p> <p>Clojure encourages the creation of simple software systems using immutable values and a pragmatic approach to pure functional design.</p> <p>The aim of Learning Clojure is to cover the essentials required to start a journey into the Clojure programming language.</p> <p>Patients, Practice and Time</p> <p>Learning any programming language takes a lot of patients, practice and time to feel comfortable.</p> <p> Practicalli recommended Clojure Learning Path </p> <p>Clojure Concepts</p>"},{"location":"#navigate-the-book","title":"Navigate the book","text":"<p>Use the mouse or built-in key bindings to navigate the pages of the book</p> <ul> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>Use the search box to quickly find a specific topic</p> <ul> <li>F , S , / : open search dialog</li> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search dialog</li> <li>Enter : follow selected result</li> </ul>"},{"location":"#resources","title":"Resources","text":"<p> Practicalli Clojure CLI Config - additional tools via aliases Clojure Aware Editors Practicalli YouTube channel</p>"},{"location":"#sponsor-practicalli","title":"Sponsor Practicalli","text":"<p>All sponsorship funds are used to support the continued development of Practicalli series of books and videos, although most work is done at personal cost and time.</p> <p>Thanks to Cognitect, Nubank and a wide range of other sponsors from the Clojure community for your continued support</p>"},{"location":"#creative-commons-license","title":"Creative commons license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets)."},{"location":"#external-resources","title":"External Resources","text":"<ul> <li>Clojure Cookbook</li> <li>Clojure Standard Reference</li> <li>Getting Clojure</li> </ul>"},{"location":"clojure-repl/","title":"Clojure REPL","text":"<p>Use the Clojure repl to</p> <ul> <li>call functions from clojure core</li> <li>create symbol names (def) that represent a value</li> <li>write custom functions (defn) and call them with data</li> <li>see immediate results when evaluating code</li> </ul>"},{"location":"clojure-repl/#getting-started","title":"Getting Started","text":"<p> Install Clojure CLI and Practicalli Clojure CLI Config for a comprehensive set of developmet tools.</p> <p>Use a  terminal UI REPL as a quick way to get started, or set up a preferred  Clojure editor.</p> Editor Connected REPL <p>An  Editor connected REPL is recommended once working with Clojure projects</p> <p>Create a Clojure project from a template</p> <p><code>:project/create</code> alias from  Practicalli Clojure CLI Config will create a Clojure project structure  <pre><code>clojure -T:project/create :name github-name/project-name\n</code></pre></p>"},{"location":"clojure-repl/#terminal-ui-repl","title":"Terminal UI REPL","text":"<p>Rebel Readline provides a rich REPL experience, providing syntax highlighting, function signatures and documentation.</p> <p>The REPL can be used with or without a Clojure project.</p> <p>Start Rebel Readline REPL using the <code>:repl/rebel</code> alias provided by  Practicalli Clojure CLI Config</p> <pre><code>clojure -M:repl/rebel\n</code></pre> <p> Rebel REPL Terminal UI</p> <p> </p>"},{"location":"clojure-repl/#clojure-editors","title":"Clojure Editors","text":"<p>Clojure editors are the preferred way to write code and evaluating source code.  Working with source files is more effective than entering all expressions directly at a REPL prompt.</p> <p>Use an editor to jack-in (start) a Clojure REPL process and connect to the running REPL.</p> <p>Or connect to a running REPL process, e.g. Rebel Terminal UI (over a network repl, nREPL).</p> <p>Use an editor that is most familiar or comfortable to minimise the learning curve.</p> <p>Clojure editors should provide</p> <ul> <li>running / connecting to a REPL process</li> <li>evaluation results inline (instant feedback on code behaviour)</li> <li>syntax highlighting, including parens matching</li> <li>Structural editing, balancing parens (paredit / parinfer)</li> <li>data inspector to navigate large &amp; nested data, or connection to external  data inpector tools</li> </ul> <p> Clojure aware editors</p> <p></p>"},{"location":"introduction/clojure-community/","title":"Connect with Clojure Community","text":"<p>There are several ways to can get help and advice from the Clojure Community.</p> <ul> <li>ask.clojure.org - official forum with the Clojure maintainers, help shape the development of Clojure</li> <li>Clojurian Slack community - very active community chat for immediate / shot term discussions</li> <li>Clojurians Zulip - active community chat with topic-based threading and full history, strong data science community and archive of most slack channels</li> <li>ClojureVerse - community forum for friendly short to long-term discussions</li> <li>New Clojurians: Ask Anything - simple web based threaded discussions</li> </ul> <p>General website such as redit/clojure are useful ways for the Clojure community to reach out to the more general development community.</p> <p>Hundreds of Clojure related videos are available on Clojure.tv, the London Clojurians community and Practicalli YouTube channels.</p>"},{"location":"introduction/clojure-community/#askclojureorg","title":"ask.clojure.org","text":"<p>An official place to ask questions about Clojure, ClojureScript, ClojureCLR, Clojure contrib libraries and any other Clojure topic.  </p> <p>This forum is used by the Clojure maintainer team and so discussions can shape the direction of Clojure, e.g. resolving problems and adding new features.</p> <p></p> <p>Questions must have one or more of the fixed categories, enabling discussions to be simpler to find and engage with.  Questions can also include tags to further specify the topic</p> <ul> <li><code>problem</code> - problem in the language or library</li> <li><code>request</code> - request for enhancement in the language or library</li> <li><code>jira</code> - a jira ticket has been raised for development, Jira link included in an answer</li> </ul> <p>An account is required to ask questions, using GitHub authentication. Once logged in, click the user name in the upper right corner and add an email address if notifications are required.</p> <p>Account holders may vote on both questions and answers. Votes are used to inform decisions about future releases of Clojure, ClojureScript, libraries, etc.</p> <p>The @AskClojure twitter account tweets new questions posted to the ask.clojure.org forum on its feed, providing another channel to keep track of discussions.</p>"},{"location":"introduction/clojure-community/#clojurians-slack-channels","title":"Clojurians Slack channels","text":"<p>clojurians.net provides a self-service way to sign up to the Clojurians slack community, which contains many channels where you can get help.  The community is very active with a relatively quick response time in the most popular channels, especially #beginners.</p> <p>Discussions are only visible for a few days as the community uses the free Slack plan, there is no way to scroll back through history in Slack once its archived.  A community log of the discussions is provided by the ClojureVerse team and many channels are mirrored by the Clojurians Zulip community.</p> <p>Channels of note include:</p> <ul> <li><code>#beginners</code> - channel for help on most topics to do with Clojure, occasionally re-directed to focused channels</li> <li><code>#announcements</code> - occasional project / library announcements only. Use a threaded reply or jump to specific topic channel for follow-on discussions.</li> <li><code>#news-and-articles</code> - published content related to Clojure development, everything that is not a project/library announcement</li> <li><code>#events</code> taking place around the world, from meetups to conferences and anything in-between</li> <li><code>#jobs</code> <code>#remote-jobs</code> for posting legitimate job vacancies (and their location), with <code>#jobs-discuss</code> for experiences and advice on finding, getting and doing a job with Clojure</li> <li><code>#spacemacs</code> <code>#calva</code> <code>#chlorine</code> - editor specific channel with questions about using those tools, customising and developing features</li> <li><code>#cider</code> <code>#clj-kondo</code> <code>#figwheel-main</code> <code>#kaocha</code> - Clojure tooling discussions (there are many more)</li> <li><code>#clojuredesign-podcast</code> <code>#defnpodcast</code> <code>#practicalli</code> - supporting live and recorded broadcasts</li> <li><code>#admin-announcements</code> - messages from the administrators of the Clojurians Slack channel</li> <li><code>#community-development</code> community growth &amp; support, reporting code of conduct breaches to the administrators</li> </ul> <p>All discussions in Slack are bound by the Clojurians community code of conduct</p> <p>Post only in one specific channel rather than potentially spamming other channels.  If there are valid exceptions, then use a short summary or link to the original post or delete the original post and add it to another channel.</p>"},{"location":"introduction/clojure-community/#clojurians-zulip","title":"Clojurians Zulip","text":"<p>Discussions history is easier to follow in the Clojurians Zulip than in Slack, especially where discussions take place over time, thanks to the Zulip topic-based threading.  Slack does have discussion threading, but this is often not used as conversation don't last in Slack.</p> <p></p> <p>The Clojurians Zulip is very actively used, although not yet quite as busy as Slack.  There is a strong data science community on Zulip and is also used for SciCoj hackathons and other (virtual) events.  It would be great to see more Clojurians using Zulip either via the website or the excellent Zulip app.</p> <p>Discussions in Clojurians Zulip are also available indefinitely, whereas Slack conversations are only visible for a few days.   If a zulipchat bot has been added to a channel in the Clojurians Slack, that channel discussion history is available as a full-text-searchable archive.  To search the history of the #beginners channel, use <code>/</code> to start a search and use the query:</p> <pre><code>stream:slack-archive topic:beginners\n</code></pre> <p>An account is required and authentication is via GitHub, GitLab, Google or username/password.</p>"},{"location":"introduction/clojure-community/#clojureverse","title":"ClojureVerse","text":"<p>A Clojure community forum that is enjoyable to use with a rich user interface (topics, participant icons, etc.).  Responses may not be as immediate as Slack, however, it is far easier to track discussions as they evolve and review past discussions.</p> <p>All the usual forum features are available and direct and private messages can be sent between user accounts.</p> <p></p>"},{"location":"introduction/clojure-community/#community-meetups","title":"Community Meetups","text":"<p> London Clojurians run regular online and in-person events.</p> <p>Code dojo in-person events are an excellent way to practice Clojure and learn from each other.  A challenge is selected at the start of the event and people are organised into small groups (2-4 people).  A show-n-tell at the end is an opportunity to share experiences between the groups.</p> <p>Talks and other presentations are online (Zoom) enabling a wide range of speakers and attendees to be involved.  These events are recorded and shared on the London Clojurians website.</p> History of the London Clojurians <p>London Clojurians was established in 2009 (London, UK) and has grown to over 4,500 members</p> <p> London Clojurians - a relatively brief history</p>"},{"location":"introduction/clojure-community/#clojure-communities","title":"Clojure Communities","text":"<p>A non-exhaustive list of Clojure communities across the world (that Practicalli is aware of).</p> <ul> <li> London Clojurians London, U.K.</li> <li>LatAm Clojure Meetup S\u00e3o Paulo, Brazil</li> <li>Clojure/Oslo Norway</li> <li>Clojadelphia Philadelphia, PA, USA</li> <li>Seajure Seattle, WA, USA</li> <li>Boston Clojure Group Cambridge, MA, USA</li> <li>Bangalore Clojure Group Bangalore, India</li> <li>Los Angeles Clojure Group Los Angeles, CA, USA</li> <li>Clojure Vienna Vienna, Austria</li> <li>Clojure Mid-Cities Southlake, TX, USA</li> <li>Clojure/nyc New York, NY, USA</li> <li>Clojure Toronto Toronto, ON, Canada</li> <li>Clojure Ireland Dublin, Ireland</li> <li>Minnesota Clojure Group Minneapolis, MN, USA</li> <li>Austin Clojure Meetup Austin, TX, USA</li> <li>Atlanta Functional Programming Meetup Atlanta, GA, USA</li> <li>Kiev Clojure Kyiv, Ukraine</li> <li>Helsinki Clojure Meetup Helsinki, Finland</li> <li>clj-melb Melbourne, Australia</li> <li>BeClojure Brussels, Belgium</li> <li>Virtual Clojure Meetup Durham, NC, USA</li> <li>Clojure D\u00fcsseldorf D\u00fcsseldorf, Germany</li> <li>Clojure Berlin Berlin, Germany</li> <li>Dutch Clojure meetup Amsterdam, Netherlands</li> <li>Bay Area Clojure group San Francisco, CA, USA</li> </ul>"},{"location":"introduction/clojure-community/#clojurebridge-communities","title":"ClojureBridge Communities","text":"<p>ClojureBridge events are often run via the local Clojure communities meetup site. </p> <ul> <li>ClojureBridge London</li> <li>ClojureBrdige Bangalore</li> </ul>"},{"location":"introduction/clojure-in-15-minutes/","title":"Clojure Syntax in 15 minutes","text":"<p>A quick tour of the Clojure syntax, which is so terse you can read through this section in around 15 minutes (or less).</p> <p>This overview is expanded throughout the Practicalli Learning Clojure book along with practical examples.</p>"},{"location":"introduction/clojure-in-15-minutes/#comments","title":"Comments","text":"<p><code>;;</code> two semi-colons for a line comment, <code>;</code> single semi-colon to comment the rest of the line</p> <p><code>#_</code> comment reader macro to comment out the next form</p> <p><code>(comment )</code> form to comment all the containing forms</p>"},{"location":"introduction/clojure-in-15-minutes/#clojure-written-in-forms","title":"Clojure written in forms","text":"<p>Clojure is written as \"expressions\", an expressions being a lists of elements (forms) inside parentheses, <code>()</code>, separated by a space character (or multiple spaces / lines).</p> <p>Clojure evaluates the first element in an expression as a function call.  Additional values in the expression are passed as arguments to the called function.</p> <p>Clojure is organised into one or more namespaces. The namespace represents the directory path and file name that contains the code of the particular namespace.</p> <pre><code>;; Define the namespace test\n(ns test.code)  ;; src/test/code.clj\n\n;; Define a longer namespace\n(ns com.company.product-name.component.service)  ;; src/com/company/product_name/component/service.clj\n</code></pre> <p>Kebab-case for Clojure, Snake-case for file_names</p> <p>Lisps use kebab-case, words joined by <code>-</code>, when names are composed of multiple words.</p> <p>File and directory names must use snake_case, words joined by <code>_</code>, as the underlying Java host does not support <code>-</code> dash characters in names.</p>"},{"location":"introduction/clojure-in-15-minutes/#string-manipulation","title":"String manipulation","text":"<p>The <code>str</code> function creates a new string from all the arguments passed</p> <pre><code>(str \"Hello\" \" \" \"World\")\n; =&gt; \"Hello World\"\n</code></pre> <p><code>clojure.string</code> returns string values (other functions my return characters as results)</p>"},{"location":"introduction/clojure-in-15-minutes/#math-truth-prefix-notation","title":"Math, Truth &amp; prefix notation","text":"<p>Functions use prefix notation, so you can do math with multiple values very easily</p> <pre><code>(+ 1 2 3 5 7 9 12) ; =&gt; 40\n(- 24 7 3) ; =&gt; 14\n(* 1 2) ; =&gt; 2\n(/ 27 7) ; =&gt; 22/7\n</code></pre> <p>Math is very precise, no need for operator precedence rules (as there are no operators)</p> <p>Nesting forms defined a very precise calculation</p> <pre><code>(+ 1 (- 3 2)) ; = 1 + (3 - 2) =&gt; 2\n</code></pre> <p>Equality is =</p> <pre><code>(= 1 1) ; =&gt; true\n(= 2 1) ; =&gt; false\n</code></pre> <p><code>true</code> and <code>false</code> are Boolean values</p> <p><code>clojure (true? true) ; =&gt; true (not true) ; =&gt; false (not= true false) ; =&gt; true (true? (complement true?)) ; =&gt; false</code></p>"},{"location":"introduction/clojure-in-15-minutes/#types","title":"Types","text":"<p>Clojure is strongly typed, so everything is a type in Clojure.</p> <p>Clojure is dynamically typed, so Clojure infers the type.  A type does not need to be specified in the code, making the code simpler and more concise.</p> <p>As Clojure is a hosted language it uses the type system of its host where relevant.  For example, Clojure uses Java object types for booleans, strings and numbers under the covers.</p> <p>Use <code>class</code> or <code>type</code> functions to inspect the type of some code in Clojure.</p> <pre><code>(class 1) ; Integer literals are java.lang.Long by default\n(class 1.); Float literals are java.lang.Double\n(class \"\"); Strings always double-quoted, and are java.lang.String\n(class false) ; Booleans are java.lang.Boolean\n(class nil); The \"null\" value is called nil\n</code></pre> <p>Vectors and Lists are java classes too!</p> <pre><code>(class [1 2 3]); =&gt; clojure.lang.PersistentVector\n(class '(1 2 3)); =&gt; clojure.lang.PersistentList\n</code></pre>"},{"location":"introduction/clojure-in-15-minutes/#collections-sequences","title":"Collections &amp; Sequences","text":"<p>The most common data collections in Clojure:</p> <ul> <li><code>(1 2 \"three\")</code> or <code>(list 1 2 \"three\")</code> - a list of values read from start to end (sequential access)</li> <li><code>[1 2 \"three\"]</code> or <code>(list 1 2 \"three\")</code> - a vector of values with index (random access)</li> <li><code>{:key \"value\"}</code> or <code>(hash-map :key \"value\")</code> - a hash-map with zero or more key value pairs (associative relation)</li> <li><code>#{1 2 \"three\"}</code> or <code>(set 1 2 \"three\")</code> - a unique set of values</li> </ul> <p>A list <code>()</code> is evaluated as a function call. The first element of the list the name of the function to call and additional values are arguments to the function.</p> <p>The <code>'</code> quote function informs the Clojure reader to treat the list as data only.</p> <pre><code>'(1 2 3)\n</code></pre> <p>Lists and vectors are collections</p> <pre><code>(coll? '(1 2 3)) ; =&gt; true\n(coll? [1 2 3]) ; =&gt; true\n</code></pre> <p>Only lists are sequences</p> <pre><code>(seq? '(1 2 3)) ; =&gt; true\n(seq? [1 2 3]) ; =&gt; false\n</code></pre> <p>Sequences are an interface for logical lists, which can be lazy. \"Lazy\" means that a sequence of valus are not evaluated until accessed.</p> <p>A lazy sequence enables the use of large or even an infinite series, like so:</p> <pre><code> (range) ; =&gt; (0 1 2 3 4 ...) - an infinite series\n(take 4 (range)) ;  (0 1 2 3) - lazyily evaluate range and stop when enough values are taken\n</code></pre> <p>Use cons to add an item to the beginning of a list or vector</p> <pre><code>(cons 4 [1 2 3]) ; =&gt; (4 1 2 3)\n(cons 4 '(1 2 3)) ; =&gt; (4 1 2 3)\n</code></pre> <p>Use conj to add an item relative to the type of collection, to the beginning of a list or the end of a vector</p> <pre><code>(conj [1 2 3] 4) ; =&gt; [1 2 3 4]\n(conj '(1 2 3) 4) ; =&gt; (4 1 2 3)\n</code></pre> <p>Use concat to add lists or vectors together</p> <pre><code>(concat [1 2] '(3 4)) ; =&gt; (1 2 3 4)\n</code></pre> <p>Use filter, map to interact with collections</p> <pre><code>(map inc [1 2 3]) ; =&gt; (2 3 4)\n(filter even? [1 2 3]) ; =&gt; (2)\n</code></pre> <p>Use reduce to reduce them</p> <pre><code>(reduce + [1 2 3 4])\n; = (+ (+ (+ 1 2) 3) 4)\n; =&gt; 10\n</code></pre> <p>Reduce can take an initial-value argument too</p> <pre><code>(reduce conj [] '(3 2 1))\n; =&gt; [3 2 1]\n</code></pre> <p>Equivalent of <code>(conj (conj (conj [] 3) 2) 1)</code></p>"},{"location":"introduction/clojure-in-15-minutes/#functions","title":"Functions","text":"<p>Use <code>fn</code> to create new functions that defines some behaviour. <code>fn</code> is referred to as an anonymous fuction as it has no external name to be referenced by and must be called within a list form.</p> <pre><code>(fn hello [] \"Hello World\") ; =&gt; hello\n</code></pre> <p>Wrap a <code>(fn ,,,)</code> form in parens to call it and return the result</p> <pre><code>((fn hello [] \"Hello World\")) ; =&gt; \"Hello World\"\n</code></pre> <p>Create a reusable function using <code>def</code>, creating a name that is a <code>var</code>.  The function behaviour defined in <code>def</code> can be changed and the expression re-evaluated to use the new behaviour.</p> <pre><code>(defn hello-world []\n  \"Hello World\")\n;; =&gt; \"Hello World\"\n</code></pre> <p>The [] is the list of arguments for the function.</p> <pre><code>(defn hello [name]\n  (str \"Hello \" name))\n(hello \"Steve\") ; =&gt; \"Hello Steve\"\n</code></pre> <p>Clojure supports  multi-variadic functions, allowing one function definition to respond to a function call with different number of arguments</p> <pre><code>(defn hello3\n  ([] \"Hello World\")\n  ([name] (str \"Hello \" name)))\n(hello3 \"Jake\") ; =&gt; \"Hello Jake\"\n(hello3) ; =&gt; \"Hello World\"\n</code></pre> <p>Functions can pack extra arguments up in a seq for you</p> <pre><code>(defn count-args [&amp; args]\n  (str \"You passed \" (count args) \" args: \" args))\n(count-args 1 2 3) ; =&gt; \"You passed 3 args: (1 2 3)\"\n</code></pre> <p>You can mix regular and packed arguments</p> <pre><code>(defn hello-count [name &amp; args]\n  (str \"Hello \" name \", you passed \" (count args) \" extra args\"))\n(hello-count \"Finn\" 1 2 3)\n; =&gt; \"Hello Finn, you passed 3 extra args\"\n</code></pre>"},{"location":"introduction/clojure-in-15-minutes/#hash-map-collections","title":"Hash-map collections","text":"<pre><code>(class {:a 1 :b 2 :c 3}) ; =&gt; clojure.lang.PersistentArrayMap\n</code></pre> <p>Keywords are like strings with some efficiency bonuses</p> <pre><code>(class :a) ; =&gt; clojure.lang.Keyword\n</code></pre> <p>Maps can use any type as a key, but usually keywords are best</p> <pre><code>(def stringmap (hash-map \"a\" 1, \"b\" 2, \"c\" 3))\nstringmap  ; =&gt; {\"a\" 1, \"b\" 2, \"c\" 3}\n\n(def keymap (hash-map :a 1 :b 2 :c 3))\nkeymap ; =&gt; {:a 1, :c 3, :b 2} (order is not guaranteed)\n</code></pre> Commas are whitespace <p>commas are always treated as whitespace and are ignored by the Clojure reader</p> <p>Retrieve a value from a map by calling it as a function</p> <pre><code>(stringmap \"a\") ; =&gt; 1\n(keymap :a) ; =&gt; 1\n</code></pre> <p>Keywords can be used to retrieve their value from a map.  Strings cannot be used.</p> <pre><code>(:b keymap) ; =&gt; 2\n\n(\"a\" stringmap)\n; =&gt; Exception: java.lang.String cannot be cast to clojure.lang.IFn\n</code></pre> <p>Retrieving a non-present value returns nil</p> <pre><code>(stringmap \"d\") ; =&gt; nil\n</code></pre> <p>Use assoc to add new keys to hash-maps</p> <pre><code>(assoc keymap :d 4) ; =&gt; {:a 1, :b 2, :c 3, :d 4}\n</code></pre> <p>But remember, clojure types are immutable!</p> <pre><code>keymap ; =&gt; {:a 1, :b 2, :c 3}\n</code></pre> <p>Use dissoc to remove keys</p> <pre><code>(dissoc keymap :a :b) ; =&gt; {:c 3}\n</code></pre>"},{"location":"introduction/clojure-in-15-minutes/#sets","title":"Sets","text":"<pre><code>(class #{1 2 3}) ; =&gt; clojure.lang.PersistentHashSet\n(set [1 2 3 1 2 3 3 2 1 3 2 1]) ; =&gt; #{1 2 3}\n</code></pre> <p>Add a member with conj</p> <pre><code>(conj #{1 2 3} 4) ; =&gt; #{1 2 3 4}\n</code></pre> <p>Remove one with disj</p> <pre><code>(disj #{1 2 3} 1) ; =&gt; #{2 3}\n````\n\nTest for existence by using the set as a function:\n\n```clojure\n(#{1 2 3} 1) ; =&gt; 1\n(#{1 2 3} 4) ; =&gt; nil\n</code></pre> <p>There are more functions in the clojure.sets namespace.</p>"},{"location":"introduction/clojure-in-15-minutes/#useful-forms","title":"Useful forms","text":"<p>Logic constructs in clojure are just macros, and look like everything else</p> <pre><code>(if false \"a\" \"b\") ; =&gt; \"b\"\n(if false \"a\") ; =&gt; nil\n</code></pre> <p>Use let to create temporary bindings</p> <pre><code>(let [a 1 b 2]\n  (&gt; a b)) ; =&gt; false\n</code></pre> <p>Group statements together with do</p> <pre><code>(do\n  (print \"Hello\")\n  \"World\") ; =&gt; \"World\" (prints \"Hello\")\n</code></pre> <p>Functions have an implicit do</p> <pre><code>(defn print-and-say-hello [name]\n  (print \"Saying hello to \" name)\n  (str \"Hello \" name))\n(print-and-say-hello \"Jeff\") ;=&gt; \"Hello Jeff\" (prints \"Saying hello to Jeff\")\n</code></pre> <p>So does let</p> <pre><code>(let [name \"Urkel\"]\n  (print \"Saying hello to \" name)\n  (str \"Hello \" name)) ; =&gt; \"Hello Urkel\" (prints \"Saying hello to Urkel\")\n</code></pre>"},{"location":"introduction/clojure-in-15-minutes/#namespaces-and-libraries","title":"Namespaces and Libraries","text":"<p>Namespaces are used to organise code into logical groups.  The top of each Clojure file has an <code>ns</code> form that defines the namespace name.  The domain part of the namespace name is typically the organisation or community name (e.g. GitHub user/organisation)</p> <pre><code>(ns domain.namespace-name)\n</code></pre> <p>All Practicalli projects have namespace domains of <code>practicalli</code></p> <pre><code>(ns practicalli.service-name)\n</code></pre> <p><code>require</code> allows code from one namespace to be accessed from another namespace, either from a the same Clojure project or from a library added to the project classpath.</p> <p>The <code>:as</code> directive with <code>require</code> is used to specify an alias name, a short-hand for the full library name</p> <p>Or <code>:refer [function-name var-name]</code> can be used to specify specific functions and data (vars) that are available directly</p> <p>A required directive is typically added to a namespace form</p> <pre><code>(ns practicalli.service-name\n  (require [clojure.set :as set]))\n</code></pre> <p>The functions from clojure.set can be used via the alias name, rather than the fully qualified name, i.e. <code>clojure.set/intersection</code></p> <pre><code>(set/intersection #{1 2 3} #{2 3 4}) ; =&gt; #{2 3}\n(set/difference #{1 2 3} #{2 3 4}) ; =&gt; #{1}\n</code></pre> <p><code>:require</code> directive can be used to include multiple library namespaces</p> <pre><code>(ns test\n  (:require\n    [clojure.string :as string]\n    [clojure.set :as set]))\n</code></pre> <p><code>require</code> can be used by itself, usually within a rich code block</p> <pre><code>(comment\n  (require 'clojure.set :as set))\n</code></pre>"},{"location":"introduction/clojure-in-15-minutes/#java","title":"Java","text":"<p>Java has a huge and useful standard library, so you'll want to learn how to get at it.</p> <p>Use import to load a java package</p> <pre><code>(import java.util.Date)\n</code></pre> <p>Or import from a java package name</p> <pre><code>(ns test\n  (:import\n    java.util.Date\n    java.util.Calendar))\n</code></pre> <p>Use the class name with a \".\" at the end to make a new instance</p> <pre><code>(Date.) ; &lt;a date object&gt;\n</code></pre> <p>Use <code>.</code> to call methods. Or, use the \".method\" shortcut</p> <pre><code>(. (Date.) getTime) ; &lt;a timestamp&gt;\n(.getTime (Date.))  ; exactly the same thing.\n</code></pre> <p>Use / to call static methods</p> <pre><code>(System/currentTimeMillis) ; &lt;a timestamp&gt; (system is always present)\n</code></pre> <p>Use doto to make dealing with (mutable) classes more tolerable</p> <pre><code>(import java.util.Calendar)\n(doto (Calendar/getInstance)\n  (.set 2000 1 1 0 0 0)\n  .getTime) ; =&gt; A Date. set to 2000-01-01 00:00:00\n</code></pre>"},{"location":"introduction/contributing/","title":"Contributing to Practicalli","text":"<p>Practicalli books are written in markdown and use MkDocs to generate the published website via a GitHub workflow.  MkDocs can also run a local server using the <code>make docs</code> target from the <code>Makefile</code></p> <p>By submitting content ideas and corrections you are agreeing they can be used in this book under the Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via GitHub contributors.</p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"introduction/contributing/#book-status","title":"Book status","text":""},{"location":"introduction/contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p>If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.</p> <p>Raising an issue before creating a pull request will save you and the maintainer time.</p>"},{"location":"introduction/contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Pull Request Commits must be cryptographically signed</p> <p>All commits contributed to Practicalli must be signed via a legitimate SSH or GPG key to avoid the risk of commit spoofing.</p> <p>Configure commit signing with SSH key - Practicalli Engineering</p> <p>All pull requests must include an entry in CHANGELOG.md or will not be merged.  A changelog entry allows the community to follow the changes to the book.</p> <p>Each pull request will have a number of CI workflows run against the contribution, checking the format of the content and if a changelog entry has been provided.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will be closed without merging as these take considerable time to review.</p> <p>Issues such as grammar improvements are typically a sign of a rushed section that requires a rewrite, so a pull request to fix a typeographic error will probably not be merged.  Raise an issue, or post a thread in the  Clojurians Slack #practicall channel</p>"},{"location":"introduction/contributing/#thank-you-to-everyone-that-has-contributed","title":"Thank you to everyone that has contributed","text":"<p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling.</p> <p>The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions.  I would also like to thank everyone that has joined in with the London Clojurins community, ClojureBridgeLondon, Clojurians Slack community, Clojurians Zulip community and Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p></p>"},{"location":"introduction/first-taste-of-clojure/","title":"Clojure Quick Reference","text":"<p>The basic Clojure syntax and a few common functions you should probably learn first.</p> <p>The examples are editable (using an embedded REPL) so feel free to experiment and watch as the return value changes as you change the code.  Reload the page if you want to reset all the code back to the starting point.</p> <p>Install Clojure on your computer if you want to experiment even further.</p> <p>Want to go deeper already?</p> <p>Watch the Clojure language video series by Brian Will for a detailed introduction to key parts of the language.  Or discover Clojure core functions by completing challenges on 4Clojure.org and then watching how Practicalli solved them.</p>"},{"location":"introduction/first-taste-of-clojure/#calling-functions","title":"Calling functions","text":"<p>The first element in a list, <code>()</code>, is a call to a function.  Any other elements are passed to the function as arguments. The examples show how to call functions with multiple arguments.</p> <p>Add values together</p> <pre><code>(+ 1 2 3 4 5)\n</code></pre> <p>Parens rather than precedence order rules</p> <pre><code>(+ 3 (* 2 (- 7 2) 4) (/ 16 4))\n</code></pre> <p>Construct a string from strings and return value of a function</p> <pre><code>(str \"Clojure is \" (- 2021 2007) \" years old\")\n</code></pre> <p>Increment a value</p> <pre><code>(inc 1)\n</code></pre> <p>Increment all values in a collection</p> <pre><code>(map inc [1 2 3 4 5])\n</code></pre> <p>Return odd values from a sequence of values</p> <pre><code>(filter odd? (range 11))\n</code></pre> <p>Prefix notation and parens</p> <p>Hugging code with <code>()</code> is a simple syntax to define the scope of code expressions.  No additional <code>;</code>, <code>,</code> or spaces are required.</p> <p>Treating the first element of a list as a function call is referred to as prefix notation, which greatly simplifies Clojure syntax.  Prefix notation makes mathematical expressions completely deterministic, eliminating the need for operator precedence.</p>"},{"location":"introduction/first-taste-of-clojure/#understanding-functions","title":"Understanding functions","text":"<p><code>clojure.repl/doc</code> function returns the doc-string of the given function. A doc-string should be part of all public function definitions.</p> <p>Clojure editors should provide commands to view doc-strings and the ability to jump to function definitions to view their source code</p> <p>Show the documentation for a function</p> <pre><code>(clojure.repl/doc map)\n</code></pre>"},{"location":"introduction/first-taste-of-clojure/#modeling-data-with-collection-types","title":"Modeling data with Collection types","text":"<p>Clojure has 4 main collection types, all immutable (cannot change once created) and can contain any Clojure types.</p> <p>A list, <code>()</code>, used for calling functions and representing sequences. A linked list for sequential access.</p> <p>Compose a string from strings an a function return value</p> <pre><code>(str \"lists used mainly \" (* 2 2) \" \" :code)\n</code></pre> <p>A vector, <code>[]</code>, used for simple collections of values.  An indexed data structure for random access</p> <p>A vector with different types of values</p> <pre><code>[0 \"indexed\" :array (* 2 2) \"random-access\" 4 :data]\n</code></pre> <p>A map, <code>{}</code>, use for descriptive data collections.  An associative data structure for value lookup by unique keys (also known as a dictionary).</p> <p>A hash-map - key value pairs</p> <pre><code>{:hash-map :associative-collection :pairs {:key \"value\"} :aka \"dictionary\"}\n</code></pre> <p>A set, <code>#{}</code>, contains a unique set of values. Sets can be used to test if a value is contained within a collection</p> <p>A Set of unique values</p> <pre><code>#{1 2 3 4 \"unique\" \"set\" \"of\" \"values\" \"unordered\" (* 3 9)}\n</code></pre> <p>Collections are Persistent data types</p> <p>List, Vector, Hash-map and Set are immutable values and cannot be changed.</p> <p>When a function transforms the contents of a collection, a new structure is returned which shares all the unchanged values from the original collection.</p> <p>The sharing approach is called persistent data types and enables immutable data to be used efficiently.</p>"},{"location":"introduction/first-taste-of-clojure/#using-data-structures","title":"Using data structures","text":"<p>Using the <code>map</code> and <code>inc</code> function, increment all the numbers in a vector</p> <p>Increment all values in a collection</p> <pre><code>(map inc [1 2 3 4 5])\n</code></pre> <p>The above <code>map</code> function is roughly equivalent to the following expression</p> <p>Conjoin all the values together into a sequence</p> <pre><code>(conj [] (inc 1) (inc 2) (inc 3) (inc 4) (inc 5))\n</code></pre> <p>The <code>conj</code> function creates a new sequenct by combining one or more values.</p> <p><code>map</code> <code>reduce</code> <code>filter</code> are common functions for iterating through a collection / sequence of values</p> <p>Multiple a value from each collection in turn</p> <pre><code>(map * [1 3 5 8 13 21] [3 5 8 13 21 34])\n</code></pre> <p>Return all the even values from a collection</p> <pre><code>(filter even? [1 3 5 8 13 21 34])\n</code></pre> <p>Add all the values together in the collection</p> <pre><code>(reduce + [31 28 30 31 30 31])\n</code></pre> <p>Check if a collection contains values</p> <pre><code>(empty? [])\n</code></pre> <p>Many Clojure core functions for collections</p> <p><code>map</code>, <code>reduce</code>, <code>apply</code>, <code>filter</code>, <code>remove</code> are just a few examples of Clojure core functions that work with data structures.</p>"},{"location":"introduction/first-taste-of-clojure/#defining-custom-functions","title":"Defining custom functions","text":"<p>Define a function to calculate the square of a given number</p> <pre><code>(defn square-of\n  \"Calculates the square of a given number\"\n  [number]\n  (* number number))\n\n(square-of 9)\n</code></pre> <p>Function definitions can also be used within other expressions, useful for mapping custom functions over a collection</p> <p>Map an anonymous function over a collection</p> <pre><code>(map (fn [number] (* number number)) [1 2 3 4 5])\n</code></pre>"},{"location":"introduction/first-taste-of-clojure/#defining-local-names","title":"Defining local names","text":"<p>Use the <code>let</code> function as a simple way to experiment with code designs</p> <p>Create local binding to hold the result of each function</p> <pre><code>(let [data (range 24 188)\n      total (reduce + data)\n      values (count data)]\n  (str \"Average value: \" (/ total values)))\n</code></pre> <p>Define local names to remove duplication in function definitions, or to simplify algorithms</p> <p>Define a function and call with a value</p> <pre><code>(defn square-of\n  \"Calculates the square of a given number\"\n  [number]\n  (* number number))\n\n(square-of 9)\n</code></pre>"},{"location":"introduction/first-taste-of-clojure/#defining-names-for-values-vars","title":"Defining names for values (vars)","text":"<p>A name bound to a value can be used to represent that value throughout the code.  Names can be bound to simple values (numbers, strings, etc.), collections or even function calls.</p> <p><code>def</code> binds a name to a value with the scope of the current namespace.  <code>def</code> is useful for data that is passed to multiple functions within a namespace.</p> <p>Evaluating a name will return the value it is bound to.</p> <p>Define a data structure to be shared within the namespace</p> <pre><code>(def public-health-data\n  [{:date \"2020-01-01\" :confirmed-cases 23814 :recovery-percent 15}\n   {:date \"2020-01-02\" :confirmed-cases 24329 :recovery-percent 14}\n   {:date \"2020-01-03\" :confirmed-cases 25057 :recovery-percent 12}])\n\npublic-health-data\n</code></pre> <p>def for shared values, let for locally scoped values</p> <p><code>let</code> function is used to bind names to values locally, such as within a function definition.  Names bound with <code>def</code> have namespace scope so can be used with any code in that namespace.</p>"},{"location":"introduction/first-taste-of-clojure/#iterating-over-collections","title":"Iterating over collections","text":"<p><code>map</code> iterates a function over a collection of values, returning a new collection of values</p> <p>Pass each argument of the sequence to the function</p> <pre><code>(map inc (range 20))\n</code></pre> <p><code>reduce</code> iterates a function over the values of a collection to produce a new result</p> <p>Add all values together in the sequence</p> <pre><code>(reduce + (range 101))\n</code></pre> <p>Reducing functions are function definitions used by the <code>reduce</code> function over a collection</p> <p>Use a reducing function over a collection, with an initial start value</p> <pre><code>(reduce (fn [[numerator denominator] accumulator]\n          [(+ numerator accumulator) (inc denominator)])\n        [0 0]\n        (range 1 20))\n</code></pre> <p>Functions can call themselves to iterate over a collection.  Using a lazy sequence means only the required numbers are generated, ensuring efficiency of operation and making the function usable in many different scenarios.</p> <p>Define a function to calculate a fibonacci sequence</p> <pre><code>(defn fibonacci-sequence\n  [current-number next-number]\n  (lazy-seq\n    (cons current-number\n          (fibonacci-sequence next-number (+ current-number next-number)))))\n\n(take 10 (fibonacci-sequence 0 1))\n</code></pre>"},{"location":"introduction/first-taste-of-clojure/#host-interoperability","title":"Host Interoperability","text":"<p>The REPL in this web page is running inside a JavaScript engine, so JavaScript functions can be used from within ClojureScript code </p> <p>Clojure uses the Java Virtual Machine as its host, so can call all the classes and methods from the Java language.  Libraries can also be imported from any JVM language, e.g. Java, Groovy, Jython, Jruby, etc.</p> <p>Java Host interop - current date</p> <pre><code>(java.time.LocalDate/now)\n</code></pre> <p>ClojureScript is the Clojure language that runs in JavaScript environments, e.g. a browser JavaScript engine, node.js</p> <p>JavaScript Host interop - browser alert popup</p> <pre><code>(js/alert \"I am a pop-up alert\")\n</code></pre> <p>Java libraries in Clojure</p> <p>java.lang library is available in Clojure by default</p>"},{"location":"introduction/first-taste-of-clojure/#next-steps","title":"Next steps","text":"<p>Install Clojure on your computer if you want to experiment even further or keep on reading more about Clojure.</p>"},{"location":"introduction/learning-path/","title":"Clojure Learning Path","text":"<p>Practicalli recommended approach for learning Clojure programming.</p> <p>A journey into Clojure should start with these foundational aspects</p> <ul> <li>Become comfortable evaluating code in the Clojure REPL</li> <li>Review the fundamental syntax of Clojure (its small and consistent)</li> <li>Configure a REPL connected Editor and create projects to save experiments</li> <li>Start discovering clojure concepts (give context to practical experience)</li> <li>Practice Clojure by solving challenges and discover more about the Clojure Standard Library (hundreds of functions available)</li> <li>Connect to the Clojure community for advice and shared experiences</li> </ul> <p>The foundational aspects are inter-related so a slice through each of them is usually the most effective approach.</p> <p>Build on that foundation by understanding the design approach to effectively create solutions in Clojure</p> <ul> <li>Designing for simplicity</li> <li>Appreciating Immutability</li> <li>Data centric design</li> <li>Common Clojure idioms (patterns)</li> <li>Common libraries</li> </ul>"},{"location":"introduction/learning-path/#clojure-repl","title":"Clojure REPL","text":"<p>Practice writing and evaluating Clojure code using  a simple REPL prompt that also provides help and documentation for standard Clojure functions.</p>"},{"location":"introduction/learning-path/#experience-the-clojure-syntax","title":"Experience the Clojure syntax","text":"<p>Take a quick look at the Syntax of Clojure.  The syntax is very small, so this will take about 15 minutes to 1 hour (dependent on your own experiences with coding).  Don't try to remember all the syntax and functions, they will come through practise.</p> <ul> <li>eg.  Clojure in 15 minutes</li> </ul>"},{"location":"introduction/learning-path/#repl-connected-editor","title":"REPL Connected Editor","text":"<p>Build on the REPL experience by connecting a Clojure aware editor to the Clojure REPL process. </p> <p>A REPL connected Editor provides an effective set of Clojure development tools to evaluate Clojure expressions.</p> <p>Understanding common Clojure project structures (src, tests, namespaces) helps organise code effectively and consistently.</p> <p>Practicalli provides editor install and usage guides for </p> <ul> <li> Emacs using Spacemacs community configuration </li> <li> Neovim using AstroNvim community configuration </li> </ul> <p> Practicalli overview of Clojure Aware Editors </p> <p>Web based Clojure environments</p> <p>Exercism includes a web-based editor for solving its challenges (and challenges can be downloaded locally).</p> <p> repl.it provides web based repl you can share / fork via a GitHub account.</p>"},{"location":"introduction/learning-path/#clojure-concepts","title":"Clojure Concepts","text":"<p>Gain an appreciation that a software system should strive for a simple design is a crucial step to truly understanding Clojure.  </p> <p>Spend an hour watching the author of the Clojure Language,  Rich Hickey, talk about Simple made Easy or read the ( transcript of talk) to emerse in the foundational concepts of Clojure.</p> <p>Review the  Clojure Big Ideas presented by Stuart Halloway and further  video presentations by Rich Hickey.</p> <p> Rich Hickey video lecture series </p>"},{"location":"introduction/learning-path/#practice-practice-practice","title":"Practice Practice Practice","text":"<p>Practice Clojure.  Write lots of small and relatively simple examples in Clojure and experiment with the code in the REPL.  </p> <p>Regular practice helps learn and retain the many of the 700+ functions within the Clojure Standard API</p> <p>Aim to become comfortable in the understanding of:</p> <ul> <li>basic values (strings, numbers, etc) and persistent collections (list, vector, map, set)</li> <li>binding names to values and their scope  (def, defn, let)</li> <li>calling functions, defining functions, arity options for functions</li> <li>Higher order functions and basics of functional composition (map, reduce, filter, etc)</li> <li>Designing with data, Extensible Data Notation (EDN), data manipulation</li> </ul> <p>Activities to help practice Clojure include:</p> <ul> <li>4ever Clojure - aim to complete the first 50 exercises and experiment with various functions from the Clojure standard library (<code>clojure.core</code>).</li> <li>Exercism Clojure Track</li> <li>Code Kata repeat exercises taking different design decisions </li> <li>Small Projects</li> </ul>"},{"location":"introduction/learning-path/#community-help","title":"Community Help","text":"<p>There are many ways to  get help from the Clojure community</p> <p>Often starting to ask questions of the community is an effective way of solving the problem yourself.  Asking specific questions helps the community help you.  Posting the specifics of the solution helps the community grow.</p> <p>Clojurians Slack community is very active and the Clojurians Zulip community is specifically active around data science.</p> In-person Code Dojo events <p>A local Clojure community may run Code Dojo events which are an excellent way to learn and practice with others. e.g. London Clojurians</p> <p>The Clojure dojo is a collaborative way to learn Clojure/ClojureScript through practice. The aim is to learn a little more than before you started.</p> <p>Collectively decide on a challenge to complete and split into small groups (2-4 people).  Discuss and start to solve the challenge by coding the next simplest thing possible.  Spend around 90 minutes in groups and come back together to show what was learned.  The dojo is about sharing lessons learned rather than completing a challenge.</p>"},{"location":"introduction/learning-path/#building-a-frame-of-reference","title":"Building a frame of reference","text":"<p>Find an introductory book that you like which provides lots of example code to help you feel more comfortable with the syntax and more importantly the major concepts of functional programming with Clojure.  Type in the exercises as you read and don't be afraid to play around with code examples</p> <p>Clojure.org Book page has a comprehensive list of commercially available books </p> <p>Freely available books Practicalli recommends:</p> <p> Practicalli Learn Clojure</p> <p> Clojure Cookbook</p> <p> Clojure for the Brave and the True</p> <p>Commercial books Practicalli recommends:</p> <p> Getting Clojure - Russ Olsen</p> <p> Clojure Essential Reference - Renzo Borgatti</p>"},{"location":"introduction/learning-path/#starter-projects","title":"Starter Projects","text":"<p>Work on a relatively small project that is care about enough to invest time on regularly, either several hours over the weekend or a couple of hours over several days in the week.</p> <ul> <li>eg. a tool to help you at work</li> </ul> <p> Practicalli Small Projects </p>"},{"location":"introduction/repl-workflow/","title":"REPL Driven Development","text":"<p>Always be REPL'ing</p> <p>Coding without a REPL feels limiting. The REPL provides fast feedback from code as its crafted, testing assumptions and design choices every step of the journey to a solution  - John Stevenson, Practical.li</p> <p>Clojure is a powerful, fun and highly productive language for developing applications and services.  The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop).  The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests).</p> <p>REPL driven development is the foundation of working with Clojure effectively</p> <p>An effective Clojure workflow begins by running a REPL process.  Clojure expressions are written and evaluated immediately to provide instant feedback. The REPL feedback helps test the assumptions that are driving the design choices.</p> <ul> <li>Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code.</li> <li>Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed</li> <li>Print - results of the code are displayed, either in the REPL or as part of the application.</li> <li>Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application.</li> </ul> <p>Design decisions and valuable data from REPL experiments can be codified as specifications and unit tests</p> <p>Practicalli REPL Reloaded Workflow</p> <p>The principles of REPL driven development are implemented in practice using the Practicalli REPL Reloaded Workflow and supporting tooling.  This workflow uses Portal to inspect all evaluation results and log events, hot-load libraries into the running REPL process and reloads namespaces to support major refactor changes.</p>"},{"location":"introduction/repl-workflow/#evaluating-source-code","title":"Evaluating source code","text":"<p>A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline.</p> <p>Source code is automatically evaluated in its respective namespace, removing the need to change namespaces in the REPL with (<code>in-ns</code>) or use fully qualified names to call functions.</p> <p> </p> Evaluate Clojure in a Terminal UI REPL <p>Entering expressions at the REPL prompt evaluates the expression immediately, returning the result directly underneath  </p>"},{"location":"introduction/repl-workflow/#rich-comment-blocks-living-documentation","title":"Rich Comment blocks - living documentation","text":"<p>The <code>(comment ,,,)</code> function wraps code that is only run directly by the developer using a Clojure aware editor.</p> <p>Expressions in rich comment blocks can represent how to use the functions that make up the namespace API.  For example, starting/restarting the system, updating the database, etc.  Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with.</p> <p>Clojure Rich Comment to manage a service</p> <pre><code>(ns practicalli.gameboard.service)\n\n(defn app-server-start [port] ,,,)\n(defn app-server-start [] ,,,)\n(defn app-server-restart [] ,,,)\n\n(defn -main\n  \"Start the service using system components\"\n  [&amp; options] ,,,)\n\n(comment\n  (-main)\n  (app-server-start 8888)\n  (app-server-stop)\n  (app-server-restart 8888)\n\n  (System/getenv \"PORT\")\n  (def environment (System/getenv))\n  (def system-properties (System/getProperties))\n  ) ; End of rich comment block\n</code></pre> <p>Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations.  </p> <p>Hide clj-kondo linter warnings for redefined vars (<code>def</code>, <code>defn</code>) when using this approach.</p> <pre><code>;; Rich comment block with redefined vars ignored\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n  (defn value-added-tax []\n    ;; algorithm design - first idea)\n\n  (defn value-added-tax []\n    ;; algorithm design - second idea)\n\n  ) ;; End of rich comment block\n</code></pre> <p>The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.</p>"},{"location":"introduction/repl-workflow/#design-journal","title":"Design Journal","text":"<p>A journal of design decisions makes the code easier to understand and maintain.  Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions.</p> <p>Journals simplify the developer on-boarding processes as the journey through design decisions are already documented.</p> <p>A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace.</p> <p>A journal should cover the following aspects</p> <ul> <li>Relevant expressions use to test assumptions about design options.</li> <li>Examples of design choices not taken and discussions why (saves repeating the same design discussions)</li> <li>Expressions that can be evaluated to explain how a function or parts of a function work</li> </ul> <p>The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations.</p> <p>Example design journal</p> <p>Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics</p>"},{"location":"introduction/repl-workflow/#viewing-data-structures","title":"Viewing data structures","text":"<p>Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results.</p> <p>Tools to view and navigate code</p> <ul> <li> Cider inspector is an effective way to navigate nested data and page through large data sets.</li> <li> Portal Inspector to visualise many kinds of data in many different forms.</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#code-style-and-idiomatic-clojure","title":"Code Style and idiomatic Clojure","text":"<p>Clojure aware editors should automatically apply formatting that follows the  Clojure Style guide.</p> <p>Live linting with  clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process.</p> <p> </p> <p>Clojure LSP is build on top of clj-kondo</p> <p> Clojure LSP uses clj-kondo static analysis to provide a standard set of development tools (format, refactor, auto-complete, syntax highlighting, syntax &amp; idiom warnings, code navigation, etc).</p> <p>Clojure LSP can be used with any Clojure aware editor that provides an LSP client, e.g.  Spacemacs,  Doom Emacs,  Neovim, VSCode.</p> <p>Clojure Style Guide</p> <p>The  Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt.  Emacs <code>clojure-mode</code> will automatically format code and so will Clojure LSP (via cljfmt).  These tools are configurable and should be tailored to the teams standard.</p>"},{"location":"introduction/repl-workflow/#data-and-function-specifications","title":"Data and Function specifications","text":"<p> Clojure spec is used to define a contract on incoming and outgoing data, to ensure it is of the correct form.</p> <p>As data structures are identified in REPL experiments, create data specification to validate the keys and value types of that data.</p> <pre><code>;; ---------------------------------------------------\n;; Address specifications\n(spec/def ::house-number string?)\n(spec/def ::street string?)\n(spec/def ::postal-code string?)\n(spec/def ::city string?)\n(spec/def ::country string?)\n(spec/def ::additional string?)\n\n(spec/def ::address   ; Composite data specification\n  (spec/keys\n   :req-un [::street ::postal-code ::city ::country]\n   :opt-un [::house-number ::additional]))\n;; ---------------------------------------------------\n</code></pre> <p>As the public API is designed, specifications for each functions arguments are added to validate the correct data is used when calling those functions.</p> <p> Generative testing provides a far greater scope of test values used incorporated into unit tests. Data uses clojure.spec to randomly generate data for testing on each test run.</p>"},{"location":"introduction/repl-workflow/#test-driven-development-and-repl-driven-development","title":"Test Driven Development and REPL Driven Development","text":"<p>Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback.</p> <p>Test Driven Development fits well with Hammock Time, as good design comes from deep thought</p> <ul> <li>RDD enables rapid design experiments so different approaches can easily and quickly be evaluated .</li> <li>TDD focuses the results of the REPL experiments into design decisions, codified as unit tests.  These tests guide the correctness of specific implementations and provide critical feedback when changes break that design.</li> </ul> <p> Unit tests should support the public API of each namespace in a project to help prevent regressions in the code.  Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought.</p> <p><code>clojure.test</code> library is part of the Clojure standard library that provides a simple way to start writing unit tests.</p> <p> Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests.  Specifications can be defined for values and functions.</p> <p>Clojure has a number of  test runners available.  Kaocha is a test runner that will run unit tests and function specification checks.</p> <p>Automate local test runner</p> <p>Use  kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) <pre><code>clojure -X:test/watch\n</code></pre></p>"},{"location":"introduction/repl-workflow/#continuous-integration-and-deployment","title":"Continuous Integration and Deployment","text":"<p>Add a  continuous integration service to run tests and builds code on every shared commit.  Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback.</p> <ul> <li> CircleCI provides a simple to use service that supports Clojure projects.</li> <li> GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action.</li> <li> GitLab CI</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#live-coding-with-data-stuart-halloway","title":"Live Coding with Data - Stuart Halloway","text":"<p>There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process.</p> <p>Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore!</p> <p>This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.</p> <p> </p>"},{"location":"introduction/who-uses-clojure/","title":"Who uses Clojure","text":"<p>Hundreds of companies actively advertised their Clojure adoption. Given the broad participation in user groups there are many more organizations using Clojure within their technology stack.</p> <p>A quick scan of various job sites shows Clojure positions at companies like Walmart, Facebook, Staples, Consumer Reports, Salesforce, and Amazon. It doesn't get much more mainstream than that.</p>"},{"location":"introduction/who-uses-clojure/#case-studies","title":"Case Studies","text":"<p>JUXT Clojure In is a Clojure consultancy company and has interviewed numerous CTO's and Tech Leads, discussing the advantages of using Clojure to solve business challenges.</p> <p>Clojure.org Community Stories also provides insights into companies using Clojure.</p>"},{"location":"introduction/who-uses-clojure/#interesting-companies","title":"Interesting Companies","text":"<p> Functional Works a recruitment company focused on functional programming jobs and built their job management platform on Clojure and ClojureScript.</p> <p>A diverse set of example companies using Clojure for development.  Many more can be found at Clojure.org Companies list, Clojure.org Community Stories and JUXT Clojure In.</p> Company Type of applications Boeing Boeing 737 MAX - onboard maintenance Puppet Labs DevOps apps &amp; services e.g. trapperkeeper Cisco Malware analysis &amp; threat intelligence platform (expert system with core.logic) Deuche Bank (UK) Processing event streams from Apache Storm Atlassian Collaborative editing platform for all their products Netflix Map-Reduce languages for writing apps for Hadoop / Pig USwitch (UK) Creating meaningful data from multiple sources Daily Mail Online (UK) Publishing pipeline Circle CI (USA) Front-end of CI server in ClojureScript &amp; test suite CitiGroup Financial Trading Student Loans company (UK) Loans management system written in Clojure LinkedIn Powers the LinkedIn social graph Walmart (USA) eReceipts project to process every purchase from 5,000+ stores SwiftKey (UK) Predictive intelligence platform (possibly used with Microsoft Cortana) Roomkey.co.uk Hotel booking system to rival Expedia (with a tiny development team) Funding Circle (UK &amp; USA) Adopting Clojure as their main language (from Ruby, etc) Braintree Payment processing pipeline with Kafka Mastodon C Data centre analysis (Incanta, Storm) Thoughtworks Agile development for Client projects world wide Vero Insurance (AUS) Rebuilt policy management system in Clojure with Thoughworks Meta-X Performance art (Overtone, Quil) Salesforce (USA) Build &amp; deployment with Puppet &amp; Application Routing with nginx-clojure <p>There are many more examples of projects on the HackerNews thread: Ask HN: Who's using Clojure in Production</p>"},{"location":"introduction/who-uses-clojure/#tech-radar","title":"Tech Radar","text":"<p>Clojure is also defined as a technology that can be adopted since 2014, according to the Thoughtworks technology radar.</p> <p></p> <p>JUXT also created its own Clojure specific technology radar as there is such an encompassing ecosystem of libraries and services.</p>"},{"location":"introduction/writing-tips/","title":"Writing tips for MkDocs","text":"<p>Making the docs more engaging using the mkdocs-material theme reference guide</p> Configuring Colors <p>Material for MkDocs - Changing the colors lists the primary and accent colors available.</p> <p>HSL Color Picker for codes to modify the theme style, overriding colors in <code>docs/assets/stylesheets/extra.css</code></p>"},{"location":"introduction/writing-tips/#hypertext-links","title":"Hypertext links","text":"<p>Links open in the same browser window/tab by default.</p> <p>Add <code>{target=_blank}</code> to the end of a link to configure opening in a new tab</p> <pre><code>[link text](url){target=_blank}\n</code></pre>"},{"location":"introduction/writing-tips/#buttons","title":"Buttons","text":"<p>Convert any link into a button by adding <code>{.md-button}</code> class names to end of the markdown for a link, which uses <code>.md-button-primary</code> by default.  Include <code>target=_blank</code> for buttons with links to external sites.</p> <pre><code>[link text](http://practical.li/blog){.md-button target=_blank}\n</code></pre> <p>Or specify a different class</p> <pre><code>[link text](http://practical.li/blog){.md-button .md-button-primary}\n</code></pre> <p>Add an icon to the button</p> <p> Practicalli Issues  Practicalli Books and Blogs  Clojure.org</p> <pre><code>[:fontawesome-brands-github: Practicalli Issues](http://practical.li/blog){ .md-button .md-button-primary }\n[:fontawesome-solid-book-open: Practicalli Books and Blogs](http://practical.li/blog){ .md-button .md-button-primary }\n[:simple-clojure: Clojure.org](http://clojure.org/){ .md-button .md-button-primary }\n</code></pre> <p> Search all supported icons</p>"},{"location":"introduction/writing-tips/#youtube-video","title":"YouTube video","text":"<p>Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position</p> <pre><code>&lt;p style=\"text-align:center\"&gt;\n&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rQ802kSaip4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/p&gt;\n</code></pre> <p>mkdocs material does not have direct support for adding a YouTube video via markdown.</p>"},{"location":"introduction/writing-tips/#admonitions","title":"Admonitions","text":"<p>Supported admonition types</p> <p>Note</p> <p>Use <code>!!!</code> followed by <code>NOTE</code></p> <p>Adding a title</p> <p>Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> <p>Shh, no title bar just the text... Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"\"</code> empty double quotes</p> <p>Abstract</p> <p>Use <code>!!!</code> followed by <code>ABSTRACT</code></p> <p>Info</p> <p>Use <code>!!!</code> followed by <code>INFO</code></p> <p>Tip</p> <p>Use <code>!!!</code> followed by <code>TIP</code></p> <p>Success</p> <p>Use <code>!!!</code> followed by <code>SUCCESS</code></p> <p>Question</p> <p>Use <code>!!!</code> followed by <code>QUESTION</code></p> <p>Warning</p> <p>Use <code>!!!</code> followed by <code>WARNING</code></p> <p>Failure</p> <p>Use <code>!!!</code> followed by <code>FAILURE</code></p> <p>Danger</p> <p>Use <code>!!!</code> followed by <code>DANGER</code></p> <p>Bug</p> <p>Use <code>!!!</code> followed by <code>BUG</code></p> <p>Example</p> <p>Use <code>!!!</code> followed by <code>EXAMPLE</code></p> <p>Quote</p> <p>Use <code>!!!</code> followed by <code>QUOTE</code></p>"},{"location":"introduction/writing-tips/#collapsing-admonitions","title":"Collapsing admonitions","text":"Note <p>Collapse those admonitions using <code>???</code> instead of <code>!!!</code></p> Replace with a title <p>Use <code>???</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> Expanded by default <p>Use <code>???+</code>, note the <code>+</code> character,  followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p>"},{"location":"introduction/writing-tips/#custom-admonitions","title":"Custom admonitions","text":"<p>Clojure-idiom</p> <p>Use <code>!!!</code> or <code>???</code> followed by <code>CLOJURE-IDIOM</code> and an optional \"title\" in double quotes</p>"},{"location":"introduction/writing-tips/#inline-admonition","title":"Inline admonition","text":"<p>Inline admonitions to make a specific callout within a paragraph of text</p> <p>Info</p> <p>Use <code>!!! INFO INLINE</code> to create an inline admonition on the left-hand side of a paragraph of text.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. </p> <p>Adding something to then end of text is the preffered choice by Practicalli books as it seems to avoid interupting the flow of the main text</p> <p>Info</p> <p>Use <code>!!! INFO INLINE END</code> to create an inline admonition on the right-hand side </p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. </p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#code-blocks","title":"Code blocks","text":"<p>Three backtics followed by an optional language name define the start of a code block.  Three backtic characters end the code block.</p> <p>Code blocks include a copy icon automatically</p> <p>Syntax highlighting in code blocks</p> <pre><code>(defn my-function  ; Write a simple function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> Code block with clojure language <pre><code>    ```clojure\n    (defn my-function  ; Write a simple function\n      \"With a lovely doc-string\"\n      [arguments]\n      (map inc [1 2 3]))\n    ```\n</code></pre> <p>Give the code block a title using <code>title=\"\"</code> after the backtics and language name</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p><code>linenums</code> adds line numbers to the code block to help refer to a specific line.  </p> <p><code>linenums=\"42\"</code> also sets the starting point of the line numbers</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> Code block with clojure language, line numbers and title <pre><code>    ```clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"\n    (defn my-function\n      \"With a lovely doc-string\"\n      [arguments]\n      (map inc [1 2 3]))\n    ```\n</code></pre>"},{"location":"introduction/writing-tips/#annotations","title":"Annotations","text":"<p>Annotations in a code block help to highlight important aspects.  Use the comment character for the language followed by a space and a number in brackets</p> <p>For example, in a shell code block, use <code># (1)</code> where 1 is the number of the annotation,  in Clojure use <code>; (1)</code>.</p> <p>Use a number after the code block to add the text for the annotation, e.g. <code>1.</code>. Ensure there is a space between the code block and the annotation text.</p> <pre><code>ls -la $HOME/Downloads  # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted text, images, anything which can be written in Markdown format.</li> </ol> <p><code>!</code> after the annotation number, e.g. <code>; (1)!</code>, hides the comment character in the annotation display.</p> <pre><code>(defn helper-function\n  \"Doc-string with description of function purpose\" ; (1)!\n  [data]\n  (merge {:fish 1} data)\n  )\n</code></pre> <ol> <li>Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is.</li> </ol> Code block with annotations <pre><code>    ```clojure\n    (defn helper-function\n      \"Doc-string with description of function purpose\" ; (1)!\n      [data]\n      (merge {:fish 1} data)\n      )\n    ```\n</code></pre> <p>GitHub action example with multiple annotations</p> <pre><code>name: ci # (1)!\non:\n  push:\n    branches:\n      - master # (2)!\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material # (3)!\n      - run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>You can change the name to your liking.</p> </li> <li> <p>At some point, GitHub renamed <code>master</code> to <code>main</code>. If your default branch     is named <code>master</code>, you can safely remove <code>main</code>, vice versa.</p> </li> <li> <p>This is the place to install further [MkDocs plugins] or Markdown     extensions with <code>pip</code> to be used during the build:</p> <pre><code>pip install \\\n  mkdocs-material \\\n  mkdocs-awesome-pages-plugin \\\n  ...\n</code></pre> </li> </ol>"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","title":"Highlight lines in code blocks","text":"<p>Add highlight line meta data to a code block after the opening backticks and code block language.</p> <p><code>hl_lines=\"2\"</code> highlights line 2 in the codeblock</p> <pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map\n   inc\n   [1 2 3]))\n</code></pre>"},{"location":"introduction/writing-tips/#embed-external-files","title":"Embed external files","text":"<p><code>--8&lt;--</code> in a code block inserts code from a source code file or other text file</p> <p>Specify a local file from the root of the book project (the directory containing mkdocs.yml)</p> Scheduled Version Check GitHub Workflow from source code file scheduled version check<pre><code>\n</code></pre> Practicalli Project Templates Emacs project configuration - .dir-locals.el<pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":test/env:dev/reloaded\"))))\n</code></pre> <p>Code example reuse</p> <p>Use an embedded local or external file (URL) when the same content is required in more than one place in the book.</p> <p>An effective way of sharing code and configuration mutliple times in a book or across multiple books.</p>"},{"location":"introduction/writing-tips/#content-tabs","title":"Content tabs","text":"<p>Create in page tabs that can also be</p> <p>Setting up a project</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/gameboard\n</code></pre> <pre><code>lein new app practicalli/gameboard\n</code></pre> <p>Or nest the content tabs in an admonition</p> <p>Run a terminal REPL</p> Clojure CLILeiningen <pre><code>clojure -T:repl/rebel\n</code></pre> <pre><code>lein repl\n</code></pre>"},{"location":"introduction/writing-tips/#diagrams","title":"Diagrams","text":"<p>Neat flow diagrams</p> <p>Diagrams - Material for MkDocs</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>UML Sequence Diagrams</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>state transition diagrams</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <p>Class diagrams - not needed for Clojure</p> <p>Entity relationship diagrams are handy though</p> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    customer-name string\n    unit-price int\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"introduction/writing-tips/#keyboard-keys","title":"Keyboard keys","text":"<p>Represent key bindings with Keyboard keys. Each number and alphabet character has their own key.</p> <ul> <li>1 <code>++1++</code> for numbers</li> <li>l <code>++\"l\"++</code> for lowercase character</li> <li>U <code>++u++</code> for uppercase character or <code>++\"U\"++</code> for consistency</li> </ul> <p>Punctionation keys use their name</p> <ul> <li>Space <code>++spc++</code></li> <li>, <code>++comma++</code></li> <li>Left <code>++arrow-left++</code></li> </ul> <p>For key sequences, place a space between each keyboard character</p> <ul> <li>Space g s <code>++spc++ ++\"g\"++ ++\"s\"++</code></li> </ul> <p>For key combinations, use join they key identifies with a <code>+</code></p> <ul> <li>Meta+X <code>++meta+x++</code></li> <li>Ctrl+Alt+Del <code>++ctrl+alt+del++</code></li> </ul> <p>MkDocs keyboard keys reference</p>"},{"location":"introduction/writing-tips/#images","title":"Images","text":"<p>Markdown images can be appended with material tags to set the size of the image, whether to appear on light or dark theme and support lazy image loading in browsers</p> SizeLazy LoadingAlignTheme SpecificAll Image Attributes <p><code>{style=\"height:150px;width:150px\"}</code> specifies the image size <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n</code></pre></p> <p></p> <p><code>{loading=lazy}</code> specifies an image should lazily load in the browser <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png){loading=lazy}\n</code></pre></p> <p><code>{aligh=left}</code> or <code>{aligh=right}</code> specifies the page alignment of an image. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right}\n</code></pre></p> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p><code>![Kitty Logo](image/kitty-light.png#only-dark)</code> or <code>![Kitty Logo](image/kitty-light.png#only-light)</code>  specifies the theme the image should be shown, allowing different versions of images to be shown based on the theme. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){style=\"height:150px;width:150px\"}\n</code></pre> Use the theme toggle in the top nav bar to see the icon change between light and dark.  </p> <p>Requires the color pallet toggle</p> <p>Alight right, lazy load and set image to 150x150</p> <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right loading=lazy style=\"height:64px;width:64px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right loading=lazy style=\"height:64px;width:64px\"}\n</code></pre> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#lists","title":"Lists","text":"<p>Task lists</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>Task List example</p> <pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre>"},{"location":"introduction/writing-tips/#tooltips","title":"Tooltips","text":"<p>The humble tool tip</p> <p>Hover me</p> <p>with references</p> <p>Hover me</p> <p>Icon tool tip with a title</p> <p></p>"},{"location":"introduction/writing-tips/#abreviations","title":"Abreviations","text":"<p>The HTML specification is maintained by the W3C.</p> <p>[HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium</p>"},{"location":"introduction/writing-tips/#magic-links","title":"Magic links","text":"<p>MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format.</p> <p>Email Practicalli</p> <p>Practicalli Neovim</p>"},{"location":"introduction/concepts/","title":"Clojure concepts","text":"<p>Clojure is an elegant language for a more civilized development experience.</p> <p>Clojure supports the creation of simple software systems using immutable values and encouraging a pragmatic approach to pure functional design.</p> <p>A simple syntax means Clojure is quick to learn and a wide range of open source libraries provides a rapid way to build any kind of software. Designed as a hosted language, Clojure runs on many platforms including the Java Virtual Machine, GraalVM, Microsoft.Net, JavaScript engines.  Simple host language interoperability provides access to libraries from a wide range of programming languages, further extending the reach of Clojure.</p> <p>Experiment with the Clojure language to help understand concepts</p> <p>Spend some time eevaluating code in the REPL and then revisit this section to get a deeper understanding of the design and philosophy of the Clojure approach to functional programming.</p> <p>Clojure concepts are easier to relate to whist practicing with Clojure and building Clojure software solutions.</p>"},{"location":"introduction/concepts/#ten-big-ideas-plus-one","title":"Ten Big Ideas plus one","text":"<p>The key to understanding Clojure is ideas, not language constructs but the concepts that shape the language.</p> <p>Each of these ideas is valuable by itself, not only in Clojure. Taken together, however, they Begin to fill in the picture of why Clojure is changing the way many programmers think about software development.</p> <ol> <li>Extensible Data Notation</li> <li>Persistent Data Structures</li> <li>Sequences</li> <li>Transducers</li> <li>Specification</li> <li>Dynamic Development</li> <li>Async Programming</li> <li>Protocols</li> <li>ClojureScript</li> <li>Logic query / Logic Programming</li> <li>Atomic Succession Model</li> </ol> <p>Stuart Halloway presents Clojure in 10 big ideas (plus one) in the following video, also see presentation Content</p> <p> </p> <ul> <li>2013 RuPy slides</li> <li>2017 Chicago JUG slides</li> </ul>"},{"location":"introduction/concepts/#antithesis-of-clojure-and-simple-software-design","title":"Antithesis of Clojure and simple software design","text":"<p>In Narcissistic Design by Stuart Halloway, the antithesis of the Clojure view of software development is presented as a description of how unproductive and valueless much of the software industry has been in the past.</p> <p>Its essentially a guide on what to avoid if you are a responsible and professional software developer.</p> <p> </p>"},{"location":"introduction/concepts/clojure-from-the-author/","title":"Clojure from the Author","text":"<p>A series of important videos from Rich Hickey, the author of Clojure who spent over 2 years designing core of Clojure around the concept of simplicity.  Since then Rich has stewarded the continued design and development of Clojure, along with the Cognitect team, ensuring Clojure stays true to is founding principles.</p> <p>Try Clojure in the REPL</p> <p>The videos can be watched at any time during the journey into Clojure.  </p> <p>An effective way to learn and become comfortable with Clojure is to write code and evaluate it in the REPL.</p> <p>Presentations by Rich Hickey are an excellent way understand the design philosophy behind Clojure and support adoption of Clojure as a highly effective language for software development.</p>"},{"location":"introduction/concepts/clojure-from-the-author/#expert-to-expert-rich-hickey-and-brian-beckman-inside-clojure","title":"Expert to Expert: Rich Hickey and Brian Beckman - Inside Clojure","text":"<p>Discussing some of the key characteristics of the Clojure language and why those decisions were taken</p> <p> </p>"},{"location":"introduction/concepts/clojure-from-the-author/#clojure-made-simple","title":"Clojure made simple","text":"<p>Covers the major problems with software development and the challenges most programming languages fail to tackle completely.</p> <p>Discusses a simple approach to software development and the big picture view of how Clojure solves these problems</p> <p> </p>"},{"location":"introduction/concepts/clojure-from-the-author/#simplicity-matters","title":"Simplicity Matters","text":"<p>!!! QUOTE Rich Hickey, Clojure Benevolent Dictator for Life     As we move forward we have to take what we already have and make that [software] do more, make it do things differently, make it do things better,  </p> <pre><code>... as we try to take on manipulating software we are ... challenged to understand it in order to make that happen.\n\n... I'll contend that you will completely be dominated by complexity.  I don't care what processes you are using, I don't care how well you test or anything else.\n\nComplexity will dominate what you do.\n</code></pre> <p> </p>"},{"location":"introduction/concepts/clojure-from-the-author/#discussing-design","title":"Discussing Design","text":""},{"location":"introduction/concepts/clojure-from-the-author/#the-value-of-values","title":"The value of values","text":"<p>Rich Hickey provides analysis of the changing way we think about values (not the philosophical kind) in light of the increasing complexity of information technology and the advent of Big Data</p> <p> </p> <p>Also see the related video: Database as a value by Rich Hickey</p> <p> </p>"},{"location":"introduction/concepts/clojure-from-the-author/#understanding-clojure-as-a-programming-language","title":"Understanding Clojure as a programming language","text":""},{"location":"introduction/concepts/what-is-functional-programming/","title":"What is Functional Programming","text":"<p>Functional programming can seem quite different from imperative programming used in languages like C, C++ and Java.</p> <p>Imperative languages may seem easier initially, as defining one step after another is familiar approach to many things in live.  As the scale of a system grows, so does complexity.  Imperative languages applied object oriented design to manage complexity with varied rates of success.</p> <p>When shared mutable state is common in an OO design, then a system quickly becomes complex and very difficult to reason about.</p> <p>Functional programming is actually simpler that the OO approach, although initially it may be unfamiliar and not considered as easy.  As systems grow in complexity, the building blocks are still simple and deterministic, creating a system that is far easier to reason about.</p>"},{"location":"introduction/concepts/what-is-functional-programming/#imperative-programming-languages","title":"Imperative programming languages","text":"<p>In Imperative languages code is written that specifies a sequential of instructions that complete a task.  These instructions typically modifies program state until the desired result is achieved.</p> <p>Variables typically represent memory addresses that are mutable (can be changed) by default.</p> <p></p>"},{"location":"introduction/concepts/what-is-functional-programming/#functional-programming-languages","title":"Functional programming languages","text":"<p>Individual tasks are small and achieved by passing data to a function which returns a result.</p> <p>Functions are composed together to form more complex tasks and satisfy larger business logic.  These composed functions pass the result of their evaluation to the next function, until all functions in the composition have been evaluated.</p> <p>The entire functional program can be thought of as a single function defined in terms of smaller ones.</p> <p>Program execution is an evaluation of expressions, with the nesting structure of function composition determining program flow.</p> <p>Data is immutable and cannot be change once created.  Changes are expressed as new values, with complex values sharing common values for efficiency.</p> <p></p>"}]}